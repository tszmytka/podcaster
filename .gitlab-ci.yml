variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

# For `master` branch run `mvn deploy` automatically.
# Here you need to decide whether you want to use JDK7 or 8.
# To get this working you need to define a volume while configuring your gitlab-ci-multi-runner.
# Mount your `settings.xml` as `/root/.m2/settings.xml` which holds your secrets.
# See https://maven.apache.org/settings.html
#deploy:jdk8:
#  # Use stage test here, so the pages job may later pickup the created site.
#  stage: test
#  script:
#    - 'mvn $MAVEN_CLI_OPTS deploy site site:stage'
#  only:
#    - master
#  # Archive up the built documentation site.
#  artifacts:
#    paths:
#      - target/staging
#  image: maven:3.3.9-jdk-8


#pages:
#  image: busybox:latest
#  stage: deploy
#  script:
#    # Because Maven appends the artifactId automatically to the staging path if you did define a parent pom,
#    # you might need to use `mv target/staging/YOUR_ARTIFACT_ID public` instead.
#    - mv target/staging public
#  dependencies:
#    - deploy:jdk8
#  artifacts:
#    paths:
#    - public
#  only:
#    - master

.jdk8: &jdk8
  image: maven:3.6-jdk-8
.jdk11: &jdk11
  image: maven:3.6-jdk-11
.jdk12: &jdk12
  image: maven:3.6-jdk-12

.build: &build
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS compile'

.unit-tests: &unit-tests
  stage: test
  only:
    - master
  script:
    - 'mvn $MAVEN_CLI_OPTS test'
    - cat target/site/jacoco/index.html

.integration-tests: &integration-tests
  stage: test
  only:
    - master
  script:
    - 'mvn $MAVEN_CLI_OPTS verify -Dskip.surefire.tests'

before_script:
  - apt-get update && apt-get install -y openjfx # workaround for images not containing javafx

Build jdk8:
  #  <<: *build
  <<: *jdk8
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS -Djava.version=8 compile'

Unit Tests jdk8:
  <<: *unit-tests
  <<: *jdk8

Integration Tests jdk8:
  <<: *integration-tests
  <<: *jdk8


Build jdk11:
  <<: *build
  <<: *jdk11

Unit Tests jdk11:
  <<: *unit-tests
  <<: *jdk11

#Integration Tests jdk11:
#  <<: *integration-tests
#  <<: *jdk11


#Build jdk12:
#  <<: *build
#  <<: *jdk12
#
#Unit Tests jdk12:
#  <<: *unit-tests
#  <<: *jdk12
#
#Integration Tests jdk12:
#  <<: *integration-tests
#  <<: *jdk12
